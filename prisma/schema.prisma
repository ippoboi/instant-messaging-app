datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth Required Models 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

// Custom App Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   // For avatar
  username      String?   @unique
  status        UserStatus @default(OFFLINE)
  lastSeen      DateTime?


  accounts      Account[]
  sessions      Session[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  conversations    Conversation[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  messages  Message[]
  participants User[]
  lastMessageAt DateTime @default(now())

  @@index([lastMessageAt])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  fileUrl   String?  // For attachments/images
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)
  
  conversationId String
  senderId      String
  receiverId    String

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
}